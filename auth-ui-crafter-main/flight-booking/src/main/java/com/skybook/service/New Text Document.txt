package com.skybook.service;

import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import com.skybook.model.Booking;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.time.format.DateTimeFormatter;

@Service
public class PdfService {

    public byte[] generateTicketPdf(Booking booking) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter writer = new PdfWriter(baos);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Header
            Paragraph header = new Paragraph("SkyBook Airlines")
                    .setFontSize(24)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontColor(new DeviceRgb(0, 102, 204));
            document.add(header);

            Paragraph subHeader = new Paragraph("E-TICKET")
                    .setFontSize(16)
                    .setTextAlignment(TextAlignment.CENTER)
                    .setMarginBottom(20);
            document.add(subHeader);

            // Booking Reference
            Paragraph bookingRef = new Paragraph("Booking Reference: " + booking.getBookingReference())
                    .setFontSize(14)
                    .setBold()
                    .setBackgroundColor(new DeviceRgb(240, 240, 240))
                    .setPadding(10)
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(bookingRef);

            document.add(new Paragraph("\n"));

            // Passenger Details Table
            Table passengerTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                    .setWidth(UnitValue.createPercentValue(100));

            addTableHeader(passengerTable, "PASSENGER DETAILS");
            addTableRow(passengerTable, "Name", booking.getPassengerFirstName() + " " + booking.getPassengerLastName());
            addTableRow(passengerTable, "Email", booking.getPassengerEmail());
            addTableRow(passengerTable, "Phone", booking.getPassengerPhone());
            
            document.add(passengerTable);
            document.add(new Paragraph("\n"));

            // Flight Details Table
            Table flightTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                    .setWidth(UnitValue.createPercentValue(100));

            addTableHeader(flightTable, "FLIGHT DETAILS");
            addTableRow(flightTable, "Flight Number", booking.getFlight().getFlightNumber());
            addTableRow(flightTable, "Airline", booking.getFlight().getAirline());
            addTableRow(flightTable, "From", booking.getFlight().getDepartureCity());
            addTableRow(flightTable, "To", booking.getFlight().getArrivalCity());
            addTableRow(flightTable, "Departure", booking.getFlight().getDepartureTime());
            addTableRow(flightTable, "Arrival", booking.getFlight().getArrivalTime());
            addTableRow(flightTable, "Duration", booking.getFlight().getDuration());

            document.add(flightTable);
            document.add(new Paragraph("\n"));

            // Payment Details Table
            Table paymentTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                    .setWidth(UnitValue.createPercentValue(100));

            addTableHeader(paymentTable, "PAYMENT DETAILS");
            addTableRow(paymentTable, "Booking Date", booking.getBookingDate().format(DateTimeFormatter.ofPattern("dd MMM yyyy, hh:mm a")));
            addTableRow(paymentTable, "Total Amount", "â‚¹" + String.format("%.2f", booking.getTotalAmount()));
            addTableRow(paymentTable, "Payment Method", booking.getPaymentMethod());
            addTableRow(paymentTable, "Transaction ID", booking.getTransactionId());
            addTableRow(paymentTable, "Status", booking.getStatus());

            document.add(paymentTable);
            document.add(new Paragraph("\n"));

            // Footer
            Paragraph footer = new Paragraph("Thank you for choosing SkyBook Airlines!\nHave a safe journey!")
                    .setFontSize(10)
                    .setTextAlignment(TextAlignment.CENTER)
                    .setItalic()
                    .setMarginTop(30);
            document.add(footer);

            Paragraph disclaimer = new Paragraph("Please carry a valid ID proof for boarding. Check-in opens 2 hours before departure.")
                    .setFontSize(8)
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontColor(ColorConstants.GRAY);
            document.add(disclaimer);

            document.close();
            return baos.toByteArray();
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to generate PDF ticket", e);
        }
    }

    private void addTableHeader(Table table, String headerText) {
        Cell headerCell = new Cell(1, 2)
                .add(new Paragraph(headerText).setBold())
                .setBackgroundColor(new DeviceRgb(0, 102, 204))
                .setFontColor(ColorConstants.WHITE)
                .setTextAlignment(TextAlignment.CENTER)
                .setPadding(10);
        table.addHeaderCell(headerCell);
    }

    private void addTableRow(Table table, String label, String value) {
        table.addCell(new Cell().add(new Paragraph(label).setBold()).setPadding(8));
        table.addCell(new Cell().add(new Paragraph(value)).setPadding(8));
    }
}